/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jjtree test.jj */
/*@egen*/
options
{
  static = true;
}

PARSER_BEGIN(SJaPParser)



public class SJaPParser/*@bgen(jjtree)*/implements SJaPParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTSJaPParserState jjtree = new JJTSJaPParserState();

/*@egen*/
  
 

  
  public static void main(String args []) throws ParseException
  {
    SJaPParser parser = new SJaPParser(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        
        start();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        SJaPParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(SJaPParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MODULO : "%" >
| < TIL : "til">
| < FRA: "fra">
| < HVIS : "hvis">
| < ELLERS : "ellers">
| < SOM : "som">
| < AF : "af">
| < FUNKTION : "funktion">
| < TAL : "tal">
| < TEKST : "tekst">
| < UDSAGN : "udsag">
| < SALANGE : "s\u00e5l\u00e6nge">
| < GENTAG : "gentag">
| < OG : "og">
| < ELLER : "eller">
| < PRINT : "print">
| < INPUT : "input">
| < OPENFILE : "\u00e5benfil">
| < CLOSEFILE : "lukfil">
| < START : "start">
| < RETURNER : "returner">
| < SANDT : "sandt">
| < FALSK : "falsk">
| < TILFOJ : "tilf\u00f8j" >
| < LENGDEN : "l\u00e6ngden" >
| < LISTE : "liste" >
| < SLET : "slet" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < NUM : ("-")? (< DIGIT1>)(< DIGIT>)*(","(< DIGIT>)*(< DIGIT1>))?>
| < STRING :"\"" (< LETTER >|< CHAR >|< DIGIT >)* "\"">
| < ID : (< LETTER>|"_")(< LETTER>|< DIGIT>|"_")*>
| < BOOL : ("sandt"| "falsk")>
| < #DIGIT : [ "0"-"9" ] >
| < #DIGIT1: [ "1"-"9"] >
| < #LETTER : [ "a"-"z","A"-"Z","\u00e6","\u00f8","\u00e5","\u00c6","\u00d8","\u00c5"]>
| < #CHAR : [ "!","@","#","\u00a3","\u00a4","$","%","&","\\","/","=","?","+","`","|","^","~","*",",",".","_",":",";","<",">","\u00bd","-","\u00a8","\u00a7","\u00be","\u00b4"]>

| < EOL: (["\n","\t","\r"])>

}



void start ()        : {/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) START */
  try {
/*@egen*/
  (
    dcl_metoder() < START > "{" linjer()"}")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void linjer ()         : {/*@bgen(jjtree) LINJER */
  SimpleNode jjtn000 = new SimpleNode(JJTLINJER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LINJER */
  try {
/*@egen*/
  (linje() < EOL >)+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void linje()        : {/*@bgen(jjtree) LINJE */
  SimpleNode jjtn000 = new SimpleNode(JJTLINJE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LINJE */
  try {
/*@egen*/
  (LOOKAHEAD(vars()
  )
  vars()
| if_statment()
| while_lokke()
| for_lokke()
| < RETURNER > operation()
| dcl_var()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void dcl_var()          : {/*@bgen(jjtree) DCL_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDCL_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DCL_VAR */
  try {
/*@egen*/
  ( LOOKAHEAD(type() < EOL >) < ID > <SOM > type()
  //{scope.hashtable.add(new var(ID,variable));}
  | LOOKAHEAD(< ID > "=") < ID > "=" variabel()
  | LOOKAHEAD(type() "=") < ID > <SOM > type() "=" operation()
  | LOOKAHEAD(< ID > "[") < ID > "[" operation() "]" "=" operation()
  | < TILFOJ > operation() < TIL > <ID >
  | < SLET > <ID > "[" vars() "]"
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

  //declerer variablerne i symbol tabellen
}

void vars()       : {/*@bgen(jjtree) VARS */
  SimpleNode jjtn000 = new SimpleNode(JJTVARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VARS */
  try {
/*@egen*/
  (
    variabel()
  | LOOKAHEAD(< ID >)< ID > 
  | < LENGDEN > < AF > < ID >
  | LOOKAHEAD(< ID > < FRA >) < ID > < FRA > operation() < TIL > operation()
  | metode()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
	
  //s\u00f8g og find i symbol tabelen
}

void variabel()           : {/*@bgen(jjtree) VARIABEL */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VARIABEL */
  try {
/*@egen*/
  (
    < NUM >
  | < STRING >
  | < BOOL >
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void type()       : {/*@bgen(jjtree) TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TYPE */
  try {
/*@egen*/
  (
    < TAL >
  | < TEKST >
  | < UDSAGN >
  | < LISTE > < AF > type()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void dcl_metoder()              : {/*@bgen(jjtree) DCL_METODER */
  SimpleNode jjtn000 = new SimpleNode(JJTDCL_METODER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DCL_METODER */
  try {
/*@egen*/
  (dcl_metode()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void dcl_metode()             : {/*@bgen(jjtree) DCL_METODE */
  SimpleNode jjtn000 = new SimpleNode(JJTDCL_METODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DCL_METODE */
  try {
/*@egen*/
  (< FUNKTION > < ID > < SOM > type()"("list_of_vars()")" "{"linjer()"}")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void metode()         : {/*@bgen(jjtree) METODE */
  SimpleNode jjtn000 = new SimpleNode(JJTMETODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) METODE */
  try {
/*@egen*/
  (< ID > "(" list_of_vars()")")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operation()            : {/*@bgen(jjtree) OPERATION */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERATION */
  try {
/*@egen*/
  (LOOKAHEAD("+") term() "+" operation()
| LOOKAHEAD("-") term() "-" operation()
| term()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void term()       : {/*@bgen(jjtree) TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TERM */
  try {
/*@egen*/
  (LOOKAHEAD("*") vars() "*" term()
| LOOKAHEAD("/")vars() "/" term()
| "(" operation() ")"
| vars()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void if_statment()               : {/*@bgen(jjtree) IF_STATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF_STATEMENT */
  try {
/*@egen*/
  (< HVIS > stats() "{" linjer() "}" ellers_statment()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ellers_statment()                   : {/*@bgen(jjtree) ELLERS_STATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTELLERS_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ELLERS_STATEMENT */
  try {
/*@egen*/
  ( LOOKAHEAD("{")< ELLERS > "{" linjer() "}"
| < ELLERS > if_statment()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void while_lokke()              : {/*@bgen(jjtree) WHILE_LOKKE */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_LOKKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WHILE_LOKKE */
  try {
/*@egen*/
  (< SALANGE > stats() < GENTAG > "{" linjer() "}"
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void for_lokke()            : {/*@bgen(jjtree) FOR_LOKKE */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_LOKKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FOR_LOKKE */
  try {
/*@egen*/
  (< GENTAG > operation() < TIL > operation() "{" linjer() "}"
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void stats()        : {/*@bgen(jjtree) STATS */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STATS */
  try {
/*@egen*/
  (LOOKAHEAD(< OG >) stat() < OG > stat()
| LOOKAHEAD(< ELLER >) stat() < ELLER > stat()
| stat()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void stat()       : {/*@bgen(jjtree) STAT */
  SimpleNode jjtn000 = new SimpleNode(JJTSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STAT */
  try {
/*@egen*/
  (LOOKAHEAD(operation()) operation() sammenlign() operation()
| "(" stats() ")"
| vars()
| "!" stat()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sammenlign()             : {/*@bgen(jjtree) SAMMENLIGN */
  SimpleNode jjtn000 = new SimpleNode(JJTSAMMENLIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SAMMENLIGN */
  try {
/*@egen*/
  (">" // st\u00f8rre end
| "<" // mindre end
| ">=" // st\u00f8rre end eller lig med
| "<=" // mindre end eller lig med
| "==" // lig med
| "!=" // ikke lig med
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void list_of_vars()               : {/*@bgen(jjtree) LIST_OF_VARS */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_OF_VARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LIST_OF_VARS */
  try {
/*@egen*/
  (operation())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

