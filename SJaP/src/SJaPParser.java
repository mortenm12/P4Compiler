/* Generated By:JavaCC: Do not edit this line. SJaPParser.java */
public class SJaPParser implements SJaPParserConstants {
  public static void main(String args []) throws ParseException
  {
    SJaPParser parser = new SJaPParser(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \u005c"1+(2+3)*4;\u005c" :");
      try
      {
        switch (SJaPParser.one_line())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        SJaPParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

/*int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >
    | < MODULO >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| "(" sum() ")"}*/
  static final public void start() throws ParseException {
    dcl_metoder();
    jj_consume_token(START);
    jj_consume_token(47);
    linjer();
    jj_consume_token(48);
  }

  static final public void linjer() throws ParseException {
    label_1:
    while (true) {
      linje();
      jj_consume_token(EOL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HVIS:
      case SALANGE:
      case GENTAG:
      case RETURNER:
      case TILFOJ:
      case LENGDEN:
      case NUM:
      case STRING:
      case ID:
      case BOOL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void linje() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGDEN:
    case NUM:
    case STRING:
    case ID:
    case BOOL:
      vars();
      break;
      metode();
      break;
    case HVIS:
      if_statment();
      break;
    case SALANGE:
      while_lokke();
      break;
    case GENTAG:
      for_lokke();
      break;
    case RETURNER:
      jj_consume_token(RETURNER);
      operation();
      break;
    case TILFOJ:
      dcl_var();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void dcl_var() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      jj_consume_token(SOM);
      type();
      break;
      jj_consume_token(ID);
      jj_consume_token(49);
      variabel();
      break;
      jj_consume_token(ID);
      jj_consume_token(SOM);
      type();
      jj_consume_token(49);
      operation();
      break;
      jj_consume_token(ID);
      jj_consume_token(50);
      operation();
      jj_consume_token(51);
      jj_consume_token(49);
      operation();
      break;
    case TILFOJ:
      jj_consume_token(TILFOJ);
      operation();
      jj_consume_token(TIL);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void vars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case STRING:
    case BOOL:
      variabel();
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case LENGDEN:
      jj_consume_token(LENGDEN);
      jj_consume_token(AF);
      jj_consume_token(ID);
      break;
      jj_consume_token(ID);
      jj_consume_token(FRA);
      operation();
      jj_consume_token(TIL);
      operation();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void variabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAL:
      jj_consume_token(TAL);
      break;
    case TEKST:
      jj_consume_token(TEKST);
      break;
    case UDSAGN:
      jj_consume_token(UDSAGN);
      break;
    case LISTE:
      jj_consume_token(LISTE);
      jj_consume_token(AF);
      type();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void dcl_metoder() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNKTION:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      dcl_metode();
    }
  }

  static final public void dcl_metode() throws ParseException {
    jj_consume_token(FUNKTION);
    jj_consume_token(ID);
    jj_consume_token(SOM);
    type();
    jj_consume_token(52);
    list_of_vars();
    jj_consume_token(53);
    jj_consume_token(47);
    linjer();
    jj_consume_token(48);
  }

  static final public void metode() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(52);
    list_of_vars();
    jj_consume_token(53);
  }

  static final public void operation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGDEN:
    case NUM:
    case STRING:
    case ID:
    case BOOL:
    case 52:
      term();
      jj_consume_token(PLUS);
      operation();
      break;
      term();
      jj_consume_token(MINUS);
      operation();
      break;
      term();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGDEN:
    case NUM:
    case STRING:
    case ID:
    case BOOL:
      vars();
      jj_consume_token(MULTIPLY);
      term();
      break;
      vars();
      jj_consume_token(DIVIDE);
      term();
      break;
      vars();
      jj_consume_token(MODULO);
      term();
      break;
    case 52:
      jj_consume_token(52);
      operation();
      jj_consume_token(53);
      break;
      vars();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void if_statment() throws ParseException {
    jj_consume_token(HVIS);
    stats();
    jj_consume_token(47);
    linjer();
    jj_consume_token(48);
    ellers_statment();
  }

  static final public void ellers_statment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLERS:
      jj_consume_token(ELLERS);
      jj_consume_token(47);
      linjer();
      jj_consume_token(48);
      break;
      jj_consume_token(ELLERS);
      if_statment();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void while_lokke() throws ParseException {
    jj_consume_token(SALANGE);
    stats();
    jj_consume_token(GENTAG);
    jj_consume_token(47);
    linjer();
    jj_consume_token(48);
  }

  static final public void for_lokke() throws ParseException {
    jj_consume_token(GENTAG);
    operation();
    jj_consume_token(TIL);
    operation();
    jj_consume_token(47);
    linjer();
    jj_consume_token(48);
  }

  static final public void stats() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGDEN:
    case NUM:
    case STRING:
    case ID:
    case BOOL:
    case 52:
      stat();
      jj_consume_token(OG);
      stat();
      break;
      stat();
      jj_consume_token(ELLER);
      stat();
      break;
      stat();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void stat() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGDEN:
    case NUM:
    case STRING:
    case ID:
    case BOOL:
    case 52:
      operation();
      sammenlign();
      operation();
      break;
      jj_consume_token(52);
      stats();
      jj_consume_token(53);
      break;
      vars();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void sammenlign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
      break;
    case 55:
      jj_consume_token(55);
      break;
    case 56:
      jj_consume_token(56);
      break;
    case 57:
      jj_consume_token(57);
      break;
    case 58:
      jj_consume_token(58);
      break;
    case 59:
      jj_consume_token(59);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void list_of_vars() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGDEN:
      case NUM:
      case STRING:
      case ID:
      case BOOL:
      case 52:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      operation();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SJaPParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80c04000,0x80c04000,0x0,0x0,0x0,0x380000,0x40000,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3cc,0x3cc,0x104,0x3c8,0x2c0,0x10,0x0,0x1003c8,0x1003c8,0x0,0x1003c8,0x1003c8,0xfc00000,0x1003c8,};
   }

  /** Constructor with InputStream. */
  public SJaPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SJaPParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SJaPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SJaPParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SJaPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SJaPParser(SJaPParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SJaPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
