/* Generated By:JJTree&JavaCC: Do not edit this line. SJaPParser.java */
import AST.start;
import AST.Linjer;
import AST.Linje;
import AST.Dcl_Var;
import AST.Dcl_Metode;
import AST.Decl_Metoder;
import AST.Ellers_Statment;
import AST.For_Lokke;
import AST.If_Statement;
import AST.ListOfVars;
import AST.Metode;
import AST.Operation;
import AST.Returner;
import AST.Sammenlign;
import AST.Stat;
import AST.Stats;
import AST.Term;
import AST.Type;
import AST.Variabel;
import AST.Vars;
import AST.While_Lokke;

import AST.Vars.var;
import AST.Vars.Get_By_Id;
import AST.Vars.List_Index;
import AST.Vars.Lenght_of_List;
import AST.Vars.Sub_List;
import AST.Vars.Meth;

import AST.Variabel.Tekst;
import AST.Variabel.Num;
import AST.Variabel.Bool;

public class SJaPParser/*@bgen(jjtree)*/implements SJaPParserTreeConstants, SJaPParserConstants {/*@bgen(jjtree)*/
  protected static JJTSJaPParserState jjtree = new JJTSJaPParserState();

  public static void main(String args []) throws ParseException
  {

    SJaPParser parser = new SJaPParser(System.in);

    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \u005c"1+(2+3)*4;\u005c" :");

      try
      {
        start AST = start();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        SJaPParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public start start() throws ParseException {
                  /*@bgen(jjtree) start */
                  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);start s= new start();
    try {
      dcl_metoder();
      jj_consume_token(START);
      jj_consume_token(48);
      s.startLinjer = linjer();
      jj_consume_token(49);
      dcl_metoder();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Linjer linjer() throws ParseException {
                     /*@bgen(jjtree) linjer */
                     SimpleNode jjtn000 = new SimpleNode(JJTLINJER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Linjer l = new Linjer();
    try {
      label_1:
      while (true) {
     l.nyLinje.add(linje());
        jj_consume_token(50);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Linje linje() throws ParseException {
                 /*@bgen(jjtree) linje */
                 SimpleNode jjtn000 = new SimpleNode(JJTLINJE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Linje l = new Linje();
    try {
      if (jj_2_1(2147483647)) {
        l.linjeIndhold = dcl_var();
      } else if (jj_2_2(2147483647)) {
        l.linjeIndhold = vars();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HVIS:
          l.linjeIndhold = if_statment();
          break;
        case SALANGE:
          l.linjeIndhold = while_lokke();
          break;
        case GENTAG:
          l.linjeIndhold = for_lokke();
          break;
        case RETURNER:
          jj_consume_token(RETURNER);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               l.linjeIndhold= new Returner(operation());
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Dcl_Var dcl_var() throws ParseException {
                     /*@bgen(jjtree) dcl_var */
  SimpleNode jjtn000 = new SimpleNode(JJTDCL_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(2147483647)) {
        jj_consume_token(ID);
        jj_consume_token(SOM);
        type();
      } else if (jj_2_4(2147483647)) {
        jj_consume_token(ID);
        jj_consume_token(51);
        operation();
      } else if (jj_2_5(2147483647)) {
        jj_consume_token(ID);
        jj_consume_token(SOM);
        type();
        jj_consume_token(51);
        operation();
      } else if (jj_2_6(2147483647)) {
        jj_consume_token(ID);
        jj_consume_token(52);
        operation();
        jj_consume_token(53);
        jj_consume_token(51);
        operation();
      } else if (jj_2_7(2147483647)) {
        jj_consume_token(TILFOJ);
        operation();
        jj_consume_token(TIL);
        jj_consume_token(ID);
      } else if (jj_2_8(2147483647)) {
        jj_consume_token(SLET);
        jj_consume_token(ID);
        jj_consume_token(52);
        operation();
        jj_consume_token(53);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Vars vars() throws ParseException {
               /*@bgen(jjtree) vars */
               SimpleNode jjtn000 = new SimpleNode(JJTVARS);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Vars v = new Vars(); Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case STRING:
      case BOOL:
    var w= v.new var();
        w.Value = variabel();
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                              v.node=w;
        break;
      default:
        jj_la1[2] = jj_gen;
        if (jj_2_9(2147483647)) {
                      Get_By_Id g = v.new Get_By_Id();
          t = jj_consume_token(ID);
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                    g.ID=t.image; v.node=g;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LENGDEN:
    Lenght_of_List l = v.new Lenght_of_List();
            jj_consume_token(LENGDEN);
            jj_consume_token(AF);
            t = jj_consume_token(ID);
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
                                                                             l.ID=t.image; v.node=l;
            break;
          default:
            jj_la1[3] = jj_gen;
            if (jj_2_10(2147483647)) {
                              Sub_List s = v.new Sub_List();
              t = jj_consume_token(ID);
              jj_consume_token(FRA);
              s.From = operation();
              jj_consume_token(TIL);
              s.To = operation();
                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                              jjtc000 = false;
                                                                                                                             s.ID=t.image; v.node=s;
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ID:
    Meth m = v.new Meth();
                m.method = metode();
                break;
              default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Variabel variabel() throws ParseException {
                       /*@bgen(jjtree) variabel */
                       SimpleNode jjtn000 = new SimpleNode(JJTVARIABEL);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Variabel v = new Variabel(); Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        t = jj_consume_token(NUM);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               Num n = v.new Num(); n.Value=Double.parseDouble(t.image);
        break;
      case STRING:
        t = jj_consume_token(STRING);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  Tekst s = v.new Tekst(); s.Value=t.image;
        break;
      case BOOL:
        t = jj_consume_token(BOOL);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                Bool b = v.new Bool(); b.Value=Boolean.parseBoolean(t.image);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Type type() throws ParseException {
               /*@bgen(jjtree) type */
               SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Type t= new Type(); Token s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAL:
        s = jj_consume_token(TAL);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               t._Type=s.toString();
        break;
      case TEKST:
        s = jj_consume_token(TEKST);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 t._Type=s.toString();
        break;
      case UDSAGN:
        s = jj_consume_token(UDSAGN);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  t._Type=s.toString();
        break;
      case LISTE:
        s = jj_consume_token(LISTE);
                 t._Type=s.toString();
        jj_consume_token(AF);
        t.NestedType = type();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Decl_Metoder dcl_metoder() throws ParseException {
                              /*@bgen(jjtree) dcl_metoder */
                              SimpleNode jjtn000 = new SimpleNode(JJTDCL_METODER);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Decl_Metoder d= new Decl_Metoder();
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNKTION:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        dcl_metode();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Dcl_Metode dcl_metode() throws ParseException {
                           /*@bgen(jjtree) dcl_metode */
                           SimpleNode jjtn000 = new SimpleNode(JJTDCL_METODE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Dcl_Metode d= new Dcl_Metode(); Token t;
    try {
      if (jj_2_11(2147483647)) {
        jj_consume_token(FUNKTION);
        t = jj_consume_token(ID);
                                          d.ID=t.toString();
        jj_consume_token(SOM);
        d.ReturType = type();
        jj_consume_token(54);
        d.ListVars = list_of_vars();
        jj_consume_token(55);
        jj_consume_token(48);
        d.lines = linjer();
        jj_consume_token(49);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNKTION:
          jj_consume_token(FUNKTION);
          t = jj_consume_token(ID);
                         d.ID=t.toString();
          jj_consume_token(54);
          d.ListVars = list_of_vars();
          jj_consume_token(55);
          jj_consume_token(48);
          d.lines = linjer();
          jj_consume_token(49);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Metode metode() throws ParseException {
                   /*@bgen(jjtree) metode */
                   SimpleNode jjtn000 = new SimpleNode(JJTMETODE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Metode m = new Metode(); Token t;
    try {
      t = jj_consume_token(ID);
             m.ID=t.toString();
      jj_consume_token(54);
      m.ListVars = list_of_vars();
      jj_consume_token(55);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Operation operation() throws ParseException {
                         /*@bgen(jjtree) operation */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(2147483647)) {
        term();
        jj_consume_token(PLUS);
        operation();
      } else if (jj_2_13(2147483647)) {
        term();
        jj_consume_token(MINUS);
        operation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LENGDEN:
        case NUM:
        case STRING:
        case ID:
        case BOOL:
        case 54:
          term();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Term term() throws ParseException {
               /*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2147483647)) {
        vars();
        jj_consume_token(MULTIPLY);
        term();
      } else if (jj_2_15(2147483647)) {
        vars();
        jj_consume_token(DIVIDE);
        term();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          jj_consume_token(54);
          operation();
          jj_consume_token(55);
          break;
        case LENGDEN:
        case NUM:
        case STRING:
        case ID:
        case BOOL:
          vars();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public If_Statement if_statment() throws ParseException {
                              /*@bgen(jjtree) if_statment */
                              SimpleNode jjtn000 = new SimpleNode(JJTIF_STATMENT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);If_Statement i = new If_Statement();
    try {
      jj_consume_token(HVIS);
      i.stats = stats();
      jj_consume_token(48);
      i.linjer = linjer();
      jj_consume_token(49);
      i.ellers = ellers_statment();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ellers_Statment ellers_statment() throws ParseException {
                                     /*@bgen(jjtree) ellers_statment */
                                     SimpleNode jjtn000 = new SimpleNode(JJTELLERS_STATMENT);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);Ellers_Statment e = new Ellers_Statment();
    try {
      if (jj_2_16(2147483647)) {
        jj_consume_token(ELLERS);
        jj_consume_token(48);
        e.linjer = linjer();
        jj_consume_token(49);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELLERS:
          jj_consume_token(ELLERS);
          e.if_stat = if_statment();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public While_Lokke while_lokke() throws ParseException {
                             /*@bgen(jjtree) while_lokke */
                             SimpleNode jjtn000 = new SimpleNode(JJTWHILE_LOKKE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);While_Lokke w = new While_Lokke();
    try {
      jj_consume_token(SALANGE);
      w.stat = stats();
      jj_consume_token(GENTAG);
      jj_consume_token(48);
      w.linjer = linjer();
      jj_consume_token(49);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public For_Lokke for_lokke() throws ParseException {
                         /*@bgen(jjtree) for_lokke */
                         SimpleNode jjtn000 = new SimpleNode(JJTFOR_LOKKE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);For_Lokke f = new For_Lokke();
    try {
      jj_consume_token(GENTAG);
      f.from = operation();
      jj_consume_token(TIL);
      f.to = operation();
      jj_consume_token(48);
      f.linjer = linjer();
      jj_consume_token(49);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Stats stats() throws ParseException {
                 /*@bgen(jjtree) stats */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_17(2147483647)) {
        stat();
        jj_consume_token(OG);
        stat();
      } else if (jj_2_18(2147483647)) {
        stat();
        jj_consume_token(ELLER);
        stat();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LENGDEN:
        case NUM:
        case STRING:
        case ID:
        case BOOL:
        case 54:
        case 56:
          stat();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Stat stat() throws ParseException {
               /*@bgen(jjtree) stat */
  SimpleNode jjtn000 = new SimpleNode(JJTSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_19(2147483647)) {
        operation();
        sammenlign();
        operation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          jj_consume_token(54);
          stats();
          jj_consume_token(55);
          break;
        case LENGDEN:
        case NUM:
        case STRING:
        case ID:
        case BOOL:
          vars();
          break;
        case 56:
          jj_consume_token(56);
          stat();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Sammenlign sammenlign() throws ParseException {
                           /*@bgen(jjtree) sammenlign */
  SimpleNode jjtn000 = new SimpleNode(JJTSAMMENLIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        jj_consume_token(57);
        break;
      case 58:
        jj_consume_token(58);
        break;
      case 59:
        jj_consume_token(59);
        break;
      case 60:
        jj_consume_token(60);
        break;
      case 61:
        jj_consume_token(61);
        break;
      case 62:
        jj_consume_token(62);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public ListOfVars list_of_vars() throws ParseException {
                             /*@bgen(jjtree) list_of_vars */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_OF_VARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LENGDEN:
        case NUM:
        case STRING:
        case ID:
        case BOOL:
        case 54:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_3;
        }
        operation();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(SLET)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(TILFOJ)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(FRA)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(TIL)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(OG)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(ELLER)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(LENGDEN)) return true;
    if (jj_scan_token(AF)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(SLET)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(TILFOJ)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(TIL)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(53)) return true;
    if (jj_scan_token(51)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(51)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(51)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(SOM)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(54)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(LISTE)) return true;
    if (jj_scan_token(AF)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(UDSAGN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(TEKST)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(TAL)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(FRA)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SJaPParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x80c04000,0x0,0x0,0x0,0x0,0x380000,0x40000,0x40000,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40000,0x0,0x580,0x8,0x200,0x580,0x10,0x0,0x0,0x400788,0x400788,0x0,0x1400788,0x1400788,0x7e000000,0x400788,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[19];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SJaPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SJaPParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SJaPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SJaPParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SJaPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SJaPParser(SJaPParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SJaPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
