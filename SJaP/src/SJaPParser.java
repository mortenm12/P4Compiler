/* Generated By:JavaCC: Do not edit this line. SJaPParser.java */
import Variabler.scopeTree;

import AST.start;
import AST.Linjer;
import AST.Linje;
import AST.Dcl_Var;
import AST.Dcl_Metode;
import AST.Decl_Metoder;
import AST.Ellers_Statment;
import AST.For_Lokke;
import AST.If_Statement;
import AST.ListOfVars;
import AST.ListOfDecl;
import AST.Metode;
import AST.Operation;
import AST.Returner;
import AST.Sammenlign;
import AST.Stat;
import AST.Stats;
import AST.Term;
import AST.Type;
import AST.Variabel;
import AST.Vars;
import AST.While_Lokke;
import AST.Print;

import AST.Vars.var;
import AST.Vars.Get_By_Id;
import AST.Vars.List_Index;
import AST.Vars.Lenght_of_List;
import AST.Vars.Sub_List;
import AST.Vars.Meth;
import AST.Vars.konv;

import AST.Variabel.Tekst;
import AST.Variabel.Num;
import AST.Variabel.Bool;
import AST.Variabel.Input;

import AST.Dcl_Var.Dcl;
import AST.Dcl_Var.Ass;
import AST.Dcl_Var.Dcl_Ass;
import AST.Dcl_Var.List_Ass;
import AST.Dcl_Var.List_Add;
import AST.Dcl_Var.List_Del;

import AST.Operation.Add;
import AST.Operation.Sub;

import AST.Term.Mul;
import AST.Term.Div;
import AST.Term.Mod;
import AST.Term.paren;
import AST.Term.vari;

import AST.Stats.and;
import AST.Stats.or;

import AST.Stat.opsop;
import AST.Stat.par;
import AST.Stat.bool;
import AST.Stat.not;

import AST.Sammenlign.bigger;
import AST.Sammenlign.lesser;
import AST.Sammenlign.biggerequal;
import AST.Sammenlign.lesserequal;
import AST.Sammenlign.equal;
import AST.Sammenlign.notequal;

public class SJaPParser implements SJaPParserConstants {


  public static void main(String args []) throws ParseException
  {

    SJaPParser parser = new SJaPParser(System.in);

    while (true)
    {
      System.out.print("Skriv din kode her:");

      try
      {
        scopeTree tree = new scopeTree();
        start AST = start();
        System.out.println("parser f\u00e6rdig");
        AST.Semanticanalyse(tree);
        System.out.println(AST.CodeGenration(tree));
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        SJaPParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public start start() throws ParseException {
                  start s= new start();
    jj_consume_token(START);
    jj_consume_token(48);
    s.startLinjer = linjer();
    jj_consume_token(49);
    s.slutMetoder = dcl_metoder();
                                                                                                    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Linjer linjer() throws ParseException {
                     Linjer l = new Linjer(); Linje li;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HVIS:
      case SALANGE:
      case GENTAG:
      case PRINT:
      case INPUT:
      case RETURNER:
      case TILFOJ:
      case LENGDEN:
      case SLET:
      case CONSTANT:
      case STRING:
      case ID:
      case BOOL:
      case 54:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      li = linje();
      jj_consume_token(50);
                    l.nyLinje.add(li);
    }
                                            {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public Linje linje() throws ParseException {
                 Linje l = new Linje();
    if (jj_2_1(2147483647)) {
      l.linjeIndhold = dcl_var();
    } else if (jj_2_2(2147483647)) {
      l.linjeIndhold = operation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HVIS:
        l.linjeIndhold = if_statment();
        break;
      case SALANGE:
        l.linjeIndhold = while_lokke();
        break;
      case GENTAG:
        l.linjeIndhold = for_lokke();
        break;
      case RETURNER:
        jj_consume_token(RETURNER);
               l.linjeIndhold= new Returner(operation());
        break;
      case PRINT:
        l.linjeIndhold = print();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public Dcl_Var dcl_var() throws ParseException {
                     Token t; Dcl_Var d = new Dcl_Var();
    if (jj_2_3(2147483647)) {
                                        Dcl dc = d.new Dcl();
      t = jj_consume_token(ID);
      jj_consume_token(SOM);
      dc.Type = type();
                                                                                               dc.ID=t.image; d.node=dc;
    } else if (jj_2_4(2147483647)) {
                          Ass a = d.new Ass();
      t = jj_consume_token(ID);
      jj_consume_token(51);
      a.Value = operation();
                                                                                  a.ID=t.image; d.node=a;
    } else if (jj_2_5(2147483647)) {
                                         Dcl_Ass da=d.new Dcl_Ass();
      t = jj_consume_token(ID);
      jj_consume_token(SOM);
      da.Type = type();
      jj_consume_token(51);
      da.Value = operation();
                                                                                                                               da.ID=t.image; d.node=da;
    } else if (jj_2_6(2147483647)) {
                           List_Ass la = d.new List_Ass();
      t = jj_consume_token(ID);
      jj_consume_token(52);
      la.Index = list_of_vars();
      jj_consume_token(53);
      jj_consume_token(51);
      la.Value = operation();
                                                                                                                               la.ID=t.image; d.node=la;
    } else if (jj_2_7(2147483647)) {
                         List_Add lad= d.new List_Add();
      jj_consume_token(TILFOJ);
      lad.Value = operation();
      jj_consume_token(TIL);
      t = jj_consume_token(ID);
                                                                                                           lad.ID=t.image; d.node=lad;
    } else if (jj_2_8(2147483647)) {
                       List_Del ld=d.new List_Del();
      jj_consume_token(SLET);
      t = jj_consume_token(ID);
      jj_consume_token(52);
      ld.Index = list_of_vars();
      jj_consume_token(53);
                                                                                                       ld.ID=t.image; d.node=ld;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Vars vars() throws ParseException {
               Vars v = new Vars(); Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
    case CONSTANT:
    case STRING:
    case BOOL:
    var w= v.new var();
      w.Value = variabel();
                                              v.node=w;
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_9(2147483647)) {
                      Get_By_Id g = v.new Get_By_Id();
        t = jj_consume_token(ID);
                                                                    g.ID=t.image; v.node=g;
      } else if (jj_2_10(2147483647)) {
                           List_Index li = v.new List_Index();
        t = jj_consume_token(ID);
        li.Index = list_of_vars();
                                                                                                  li.ID=t.image; v.node=li;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LENGDEN:
    Lenght_of_List l = v.new Lenght_of_List();
          jj_consume_token(LENGDEN);
          jj_consume_token(AF);
          t = jj_consume_token(ID);
                                                                             l.ID=t.image; v.node=l;
          break;
        default:
          jj_la1[3] = jj_gen;
          if (jj_2_11(2147483647)) {
                              Sub_List s = v.new Sub_List();
            t = jj_consume_token(ID);
            jj_consume_token(FRA);
            s.From = operation();
            jj_consume_token(TIL);
            s.To = operation();
                                                                                                                             s.ID=t.image; v.node=s;
          } else if (jj_2_12(2147483647)) {
            t = jj_consume_token(ID);
            jj_consume_token(TIL);
            jj_consume_token(TAL);
                                          konv k = v.new konv(); k.ID=t.image;
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
    Meth m = v.new Meth();
              m.method = metode();
              break;
            default:
              jj_la1[4] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
     {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public Variabel variabel() throws ParseException {
                       Variabel v = new Variabel(); Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      t = jj_consume_token(CONSTANT);
                  Num n = v.new Num(); n.Value=Double.parseDouble(t.image); v.node=n; {if (true) return v;}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                  Tekst s = v.new Tekst(); s.Value=t.image; v.node=s; {if (true) return v;}
      break;
    case BOOL:
      t = jj_consume_token(BOOL);
                Bool b = v.new Bool(); b.Value=Boolean.parseBoolean(t.image); v.node=b; {if (true) return v;}
      break;
    case INPUT:
      jj_consume_token(INPUT);
      jj_consume_token(54);
      jj_consume_token(55);
                     Input i = v.new Input(); v.node=i; {if (true) return v;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type type() throws ParseException {
               Type t= new Type(); Token s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAL:
      s = jj_consume_token(TAL);
               t._Type=s.image;
      break;
    case TEKST:
      s = jj_consume_token(TEKST);
                 t._Type=s.image;
      break;
    case UDSAGN:
      s = jj_consume_token(UDSAGN);
                  t._Type=s.image;
      break;
    case LISTE:
      s = jj_consume_token(LISTE);
                 t._Type=s.image;
      jj_consume_token(AF);
      t.NestedType = type();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Decl_Metoder dcl_metoder() throws ParseException {
                              Decl_Metoder d= new Decl_Metoder();
    label_2:
    while (true) {
      if (jj_2_13(2147483647)) {
        ;
      } else {
        break label_2;
      }
      dcl_metode();
    }
                                          {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Dcl_Metode dcl_metode() throws ParseException {
                           Dcl_Metode d= new Dcl_Metode(); Token t;
    if (jj_2_14(2147483647)) {
      jj_consume_token(FUNKTION);
      t = jj_consume_token(ID);
                                          d.ID=t.image;
      jj_consume_token(SOM);
      d.ReturType = type();
      jj_consume_token(54);
      d.ListDcl = list_of_dcl();
      jj_consume_token(55);
      jj_consume_token(48);
      d.lines = linjer();
      jj_consume_token(49);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNKTION:
        jj_consume_token(FUNKTION);
        t = jj_consume_token(ID);
                         d.ID=t.image;
        jj_consume_token(54);
        d.ListDcl = list_of_dcl();
        jj_consume_token(55);
        jj_consume_token(48);
        d.lines = linjer();
        jj_consume_token(49);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                                                               {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Metode metode() throws ParseException {
                   Metode m = new Metode(); Token t;
    t = jj_consume_token(ID);
             m.ID=t.image;
    jj_consume_token(54);
    m.ListVars = list_of_vars();
    jj_consume_token(55);
                                                               {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public Operation operation() throws ParseException {
                         Operation o = new Operation();
    if (jj_2_15(2147483647)) {
                   Add a = o.new Add();
      o.term = term();
      jj_consume_token(PLUS);
      o.operation = operation();
                                                                                    o.node = a;
    } else if (jj_2_16(2147483647)) {
                  Sub s = o.new Sub();
      s.term = term();
      jj_consume_token(MINUS);
      s.operation = operation();
                                                                                   o.node = s;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case LENGDEN:
      case CONSTANT:
      case STRING:
      case ID:
      case BOOL:
      case 54:
        o.node = term();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  static final public Term term() throws ParseException {
               Term t = new Term();
    if (jj_2_17(2147483647)) {
                   Mul m = t.new Mul();
      m.op = vars();
      jj_consume_token(MULTIPLY);
      m.term = term();
                                                                        t.node = m;
    } else if (jj_2_18(2147483647)) {
                  Div d = t.new Div();
      d.op = vars();
      jj_consume_token(DIVIDE);
      d.term = term();
                                                                       t.node = d;
    } else if (jj_2_19(2147483647)) {
                  Mod mo = t.new Mod();
      mo.op = vars();
      jj_consume_token(MODULO);
      mo.term = term();
                                                                           t.node = mo;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        jj_consume_token(54);
       paren pa = t.new paren();
        pa.opera = operation();
        jj_consume_token(55);
                                                            t.node = pa;
        break;
      case INPUT:
      case LENGDEN:
      case CONSTANT:
      case STRING:
      case ID:
      case BOOL:
   vari v = t.new vari();
        v.op = vars();
                                        t.node = v;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public If_Statement if_statment() throws ParseException {
                              If_Statement i = new If_Statement();
    jj_consume_token(HVIS);
    i.stats = stats();
    jj_consume_token(48);
    i.linjer = linjer();
    jj_consume_token(49);
    i.ellers = ellers_statment();
     {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public Ellers_Statment ellers_statment() throws ParseException {
                                     Ellers_Statment e = new Ellers_Statment();
    if (jj_2_20(2147483647)) {
      jj_consume_token(ELLERS);
      jj_consume_token(48);
      e.linjer = linjer();
      jj_consume_token(49);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELLERS:
        jj_consume_token(ELLERS);
        e.if_stat = if_statment();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public While_Lokke while_lokke() throws ParseException {
                             While_Lokke w = new While_Lokke();
    jj_consume_token(SALANGE);
    w.stat = stats();
    jj_consume_token(GENTAG);
    jj_consume_token(48);
    w.linjer = linjer();
    jj_consume_token(49);
     {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  static final public For_Lokke for_lokke() throws ParseException {
                         For_Lokke f = new For_Lokke();
    jj_consume_token(GENTAG);
    jj_consume_token(56);
    f.from = operation();
    jj_consume_token(TIL);
    f.to = operation();
    jj_consume_token(48);
    f.linjer = linjer();
    jj_consume_token(49);
     {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public Stats stats() throws ParseException {
                 Stats s = new Stats();
    if (jj_2_21(2147483647)) {
                     and a = s.new and();
      a.stat1 = stat();
      jj_consume_token(OG);
      a.stat2 = stat();
                                                                                  s.node=a;
    } else if (jj_2_22(2147483647)) {
                        or o = s.new or();
      o.stat1 = stat();
      jj_consume_token(ELLER);
      o.stat2 = stat();
                                                                                     s.node=o;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case LENGDEN:
      case CONSTANT:
      case STRING:
      case ID:
      case BOOL:
      case 54:
      case 57:
        s.stat1 = stat();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Stat stat() throws ParseException {
               Stat s = new Stat();
    if (jj_2_23(2147483647)) {
                           opsop o = s.new opsop();
      o.op1 = operation();
      o.operator = sammenlign();
      o.op2 = operation();
                                                                                                                  s.node=o;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
   par p = s.new par();
        jj_consume_token(54);
        p.stats = stats();
        jj_consume_token(55);
                                                 s.node=p;
        break;
      case INPUT:
      case LENGDEN:
      case CONSTANT:
      case STRING:
      case ID:
      case BOOL:
   bool b = s.new bool();
        b.udsagn = vars();
                                            s.node=b;
        break;
      case 57:
   not n=s.new not();
        jj_consume_token(57);
        n.stat = stat();
                                          s.node=n;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Sammenlign sammenlign() throws ParseException {
                           Sammenlign s = new Sammenlign();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
        s.node=s.new bigger(); {if (true) return s;}
      break;
    case 59:
      jj_consume_token(59);
       s.node=s.new lesser(); {if (true) return s;}
      break;
    case 60:
      jj_consume_token(60);
        s.node=s.new biggerequal(); {if (true) return s;}
      break;
    case 61:
      jj_consume_token(61);
        s.node=s.new lesserequal(); {if (true) return s;}
      break;
    case 62:
      jj_consume_token(62);
        s.node=s.new equal(); {if (true) return s;}
      break;
    case 63:
      jj_consume_token(63);
        s.node=s.new notequal(); {if (true) return s;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public ListOfVars list_of_vars() throws ParseException {
                             ListOfVars l = new ListOfVars(); Operation o;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case LENGDEN:
      case CONSTANT:
      case STRING:
      case ID:
      case BOOL:
      case 54:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      o = operation();
                    l.op.add(o);
    }
                                     {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public ListOfDecl list_of_dcl() throws ParseException {
                           ListOfDecl d = new ListOfDecl();  Token t; Dcl_Var v = new Dcl_Var(); Dcl dc = v.new Dcl();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(ID);
      jj_consume_token(SOM);
      dc.Type = type();
                                        dc.ID=t.image; d.Dcl_list.add(dc);
    }
                                                                               {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Print print() throws ParseException {
                 Print p = new Print();
    jj_consume_token(PRINT);
    jj_consume_token(54);
    p.op = operation();
    jj_consume_token(55);
                                           {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(54)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(ELLER)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(OG)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_6()) return true;
    if (jj_3R_74()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(ELLER)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(OG)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(GENTAG)) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(TIL)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(SALANGE)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(GENTAG)) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(ELLERS)) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(ELLERS)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(MODULO)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(HVIS)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(49)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(SOM)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(54)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(FUNKTION)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(54)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(FUNKTION)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(54)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(LISTE)) return true;
    if (jj_scan_token(AF)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(UDSAGN)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(TEKST)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(TAL)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(INPUT)) return true;
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(TIL)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(FRA)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(TIL)) return true;
    if (jj_scan_token(TAL)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(SLET)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(FRA)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(TIL)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(TILFOJ)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(LENGDEN)) return true;
    if (jj_scan_token(AF)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(SLET)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(TILFOJ)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(TIL)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(53)) return true;
    if (jj_scan_token(51)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(51)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(51)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SOM)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(RETURNER)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SJaPParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8cc04000,0x84c04000,0x8000000,0x0,0x0,0x8000000,0x380000,0x40000,0x8000000,0x8000000,0x8000,0x8000000,0x8000000,0x0,0x8000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40076c,0x0,0x540,0x8,0x200,0x540,0x10,0x0,0x400748,0x400748,0x0,0x2400748,0x2400748,0xfc000000,0x400748,0x200,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[23];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SJaPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SJaPParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SJaPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SJaPParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SJaPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SJaPParser(SJaPParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SJaPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
