/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jjtree test.jj */
/*@egen*/
options
{
  static = true;
                 
}

PARSER_BEGIN(SJaPParser)

import AST.start;
import AST.Linjer;
import AST.Linje;
import AST.Dcl_Var;
import AST.Dcl_Metode;
import AST.Decl_Metoder;
import AST.Ellers_Statment;
import AST.For_Lokke;
import AST.If_Statement;
import AST.ListOfVars;
import AST.Metode;
import AST.Operation;
import AST.Returner;
import AST.Sammenlign;
import AST.Stat;
import AST.Stats;
import AST.Term;
import AST.Type;
import AST.Variabel;
import AST.Vars;
import AST.While_Lokke;

import AST.Vars.var;
import AST.Vars.Get_By_Id;
import AST.Vars.List_Index;
import AST.Vars.Lenght_of_List;
import AST.Vars.Sub_List;
import AST.Vars.Meth;

import AST.Variabel.Tekst;
import AST.Variabel.Num;
import AST.Variabel.Bool;

import AST.Dcl_Var.Dcl;
import AST.Dcl_Var.Ass;
import AST.Dcl_Var.Dcl_Ass;
import AST.Dcl_Var.List_Ass;
import AST.Dcl_Var.List_Add;
import AST.Dcl_Var.List_Del;

import AST.Operation.Add;
import AST.Operation.Sub;

import AST.Term.Mul;
import AST.Term.Div;
import AST.Term.Mod;
import AST.Term.paren;
import AST.Term.vari;

import AST.Stats.and;
import AST.Stats.or;

import AST.Stat.opsop;
import AST.Stat.par;
import AST.Stat.bool;
import AST.Stat.not;

import AST.Sammenlign.bigger;
import AST.Sammenlign.lesser;
import AST.Sammenlign.biggerequal;
import AST.Sammenlign.lesserequal;
import AST.Sammenlign.equal;
import AST.Sammenlign.notequal;

public class SJaPParser/*@bgen(jjtree)*/implements SJaPParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTSJaPParserState jjtree = new JJTSJaPParserState();

/*@egen*/
   
   
  public static void main(String args []) throws ParseException
  {
    
    SJaPParser parser = new SJaPParser(System.in);
    
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      
      try
      {
        start AST = start();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        SJaPParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(SJaPParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MODULO : "%" >
| < TIL : "til">
| < FRA: "fra">
| < HVIS : "hvis">
| < ELLERS : "ellers">
| < SOM : "som">
| < AF : "af">
| < FUNKTION : "funktion">
| < TAL : "tal">
| < TEKST : "tekst">
| < UDSAGN : "udsag">
| < SALANGE : "s\u00e5l\u00e6nge">
| < GENTAG : "gentag">
| < OG : "og">
| < ELLER : "eller">
| < PRINT : "print">
| < INPUT : "input">
| < OPENFILE : "\u00e5benfil">
| < CLOSEFILE : "lukfil">
| < START : "start">
| < RETURNER : "returner">
| < SANDT : "sandt">
| < FALSK : "falsk">
| < TILFOJ : "tilf\u00f8j" >
| < LENGDEN : "l\u00e6ngden" >
| < LISTE : "liste" >
| < SLET : "slet" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < NUM : ("-")? (< DIGIT1>)(< DIGIT>)*(","(< DIGIT>)*(< DIGIT1>))?>
| < STRING :"\"" (< LETTER >|< CHAR >|< DIGIT >)* "\"">
| < ID : (< LETTER>|"_")(< LETTER>|< DIGIT>|"_")*>
| < BOOL : ("sandt"| "falsk")>
| < #DIGIT : [ "0"-"9" ] >
| < #DIGIT1: [ "1"-"9"] >
| < #LETTER : [ "a"-"z","A"-"Z","\u00e6","\u00f8","\u00e5","\u00c6","\u00d8","\u00c5"]>
| < #CHAR : [ "!","@","#","\u00a3","\u00a4","$","%","&","\\","/","=","?","+","`","|","^","~","*",",",".","_",":",";","<",">","\u00bd","-","\u00a8","\u00a7","\u00be","\u00b4"]>

| < EOL: (["\n","\t","\r"])>

}



start start () : {/*@bgen(jjtree) start */
                  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/start s= new start();}
{/*@bgen(jjtree) start */
  try {
/*@egen*/
  (
    dcl_metoder() < START > "{" s.startLinjer=linjer()"}" dcl_metoder())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Linjer linjer ()  : {/*@bgen(jjtree) linjer */
                     SimpleNode jjtn000 = new SimpleNode(JJTLINJER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Linjer l = new Linjer(); Linje li;}
{/*@bgen(jjtree) linjer */
  try {
/*@egen*/
  ( li=linje()";" { l.nyLinje.add(li); })+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Linje linje() : {/*@bgen(jjtree) linje */
                 SimpleNode jjtn000 = new SimpleNode(JJTLINJE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Linje l = new Linje();}
{/*@bgen(jjtree) linje */
 try {
/*@egen*/
 (LOOKAHEAD(dcl_var()) l.linjeIndhold=dcl_var()
| LOOKAHEAD(vars()) l.linjeIndhold=vars()
| l.linjeIndhold=if_statment()
| l.linjeIndhold=while_lokke()
| l.linjeIndhold=for_lokke()
|< RETURNER >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {l.linjeIndhold= new Returner(operation());} 

  )/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

Dcl_Var dcl_var() : {/*@bgen(jjtree) dcl_var */
                     SimpleNode jjtn000 = new SimpleNode(JJTDCL_VAR);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; Dcl_Var d = new Dcl_Var();}
{/*@bgen(jjtree) dcl_var */
  try {
/*@egen*/
  ( LOOKAHEAD(< ID > <SOM > type() ";"){Dcl dc = d.new Dcl();} t=< ID > <SOM > dc.Type=type()/*@bgen(jjtree)*/
                                                                                              {
                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                jjtc000 = false;
                                                                                              }
/*@egen*/ {dc.ID=t.image; d.node=dc;}
  | LOOKAHEAD(< ID > "="){Ass a = d.new Ass();} t=< ID > "=" a.Value=operation()/*@bgen(jjtree)*/
                                                                                 {
                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
                                                                                 }
/*@egen*/ {a.ID=t.image; d.node=a;}
  | LOOKAHEAD(< ID > <SOM > type() "=") {Dcl_Ass da=d.new Dcl_Ass();} t=< ID > <SOM > da.Type=type() "=" da.Value=operation()/*@bgen(jjtree)*/
                                                                                                                              {
                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                jjtc000 = false;
                                                                                                                              }
/*@egen*/ {da.ID=t.image; d.node=da;}
  | LOOKAHEAD(< ID > "[") {List_Ass la = d.new List_Ass();} t=< ID > "[" la.Index=operation() "]" "=" la.Value=operation()/*@bgen(jjtree)*/
                                                                                                                           {
                                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                                             jjtc000 = false;
                                                                                                                           }
/*@egen*/ {la.ID=t.image; d.node=la;}
  | LOOKAHEAD("tilf\u00f8j") {List_Add lad= d.new List_Add();}< TILFOJ > lad.Value=operation() < TIL > t=<ID >/*@bgen(jjtree)*/
                                                                                                          {
                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                            jjtc000 = false;
                                                                                                          }
/*@egen*/ {lad.ID=t.image; d.node=lad;}
  | LOOKAHEAD("slet") {List_Del ld=d.new List_Del();}< SLET > t=<ID > "[" ld.Index=operation() "]"/*@bgen(jjtree)*/
                                                                                                   {
                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                     jjtc000 = false;
                                                                                                   }
/*@egen*/ {ld.ID=t.image; d.node=ld;}
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

Vars vars() : {/*@bgen(jjtree) vars */
               SimpleNode jjtn000 = new SimpleNode(JJTVARS);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Vars v = new Vars(); Token t;}
{/*@bgen(jjtree) vars */
  try {
/*@egen*/
  ({var w= v.new var();} w.Value=variabel()/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/  {v.node=w;}
  |LOOKAHEAD(< ID >) {Get_By_Id g = v.new Get_By_Id();}  t= < ID >/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/ {g.ID=t.image; v.node=g;}
  |{Lenght_of_List l = v.new Lenght_of_List();} < LENGDEN > < AF > t=< ID >/*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
                                                                            }
/*@egen*/ {l.ID=t.image; v.node=l;}
  |LOOKAHEAD(< ID > < FRA >) {Sub_List s = v.new Sub_List();}  t=< ID > < FRA > s.From=operation() < TIL > s.To=operation()/*@bgen(jjtree)*/
                                                                                                                            {
                                                                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                                                                              jjtc000 = false;
                                                                                                                            }
/*@egen*/ {s.ID=t.image; v.node=s;}
  |{Meth m = v.new Meth();} m.method=metode()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
	
  //s\u00f8g og find i symbol tabelen
}

Variabel variabel() : {/*@bgen(jjtree) variabel */
                       SimpleNode jjtn000 = new SimpleNode(JJTVARIABEL);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Variabel v = new Variabel(); Token t;}
{/*@bgen(jjtree) variabel */
  try {
/*@egen*/
  (
    t=< NUM >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {Num n = v.new Num(); n.Value=Double.parseDouble(t.image); return v;} 
  | t=< STRING >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {Tekst s = v.new Tekst(); s.Value=t.image; return v;}
  | t=< BOOL >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {Bool b = v.new Bool(); b.Value=Boolean.parseBoolean(t.image); return v;}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Type type() : {/*@bgen(jjtree) type */
               SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Type t= new Type(); Token s;}
{/*@bgen(jjtree) type */
  try {
/*@egen*/
  (
    s=< TAL >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {t._Type=s.image;}
  | s=< TEKST >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {t._Type=s.image;}
  | s=< UDSAGN >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {t._Type=s.image;}
  | s=< LISTE > {t._Type=s.image;} < AF > t.NestedType=type()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Decl_Metoder dcl_metoder() : {/*@bgen(jjtree) dcl_metoder */
                              SimpleNode jjtn000 = new SimpleNode(JJTDCL_METODER);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Decl_Metoder d= new Decl_Metoder();}
{/*@bgen(jjtree) dcl_metoder */
  try {
/*@egen*/
  (dcl_metode())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Dcl_Metode dcl_metode() : {/*@bgen(jjtree) dcl_metode */
                           SimpleNode jjtn000 = new SimpleNode(JJTDCL_METODE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Dcl_Metode d= new Dcl_Metode(); Token t;}
{/*@bgen(jjtree) dcl_metode */
  try {
/*@egen*/
  (LOOKAHEAD("som")< FUNKTION > t=< ID > {d.ID=t.image;} < SOM > d.ReturType=type()"("d.ListVars=list_of_vars()")" "{"d.lines=linjer()"}"
| < FUNKTION > t=< ID > {d.ID=t.image;} "("d.ListVars=list_of_vars()")" "{"d.lines=linjer()"}")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Metode metode() : {/*@bgen(jjtree) metode */
                   SimpleNode jjtn000 = new SimpleNode(JJTMETODE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Metode m = new Metode(); Token t;}
{/*@bgen(jjtree) metode */
  try {
/*@egen*/
  (t=< ID > {m.ID=t.image;} "(" m.ListVars=list_of_vars()")")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Operation operation() : {/*@bgen(jjtree) operation */
                         SimpleNode jjtn000 = new SimpleNode(JJTOPERATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Operation o = new Operation();}
{/*@bgen(jjtree) operation */
  try {
/*@egen*/
  (LOOKAHEAD("+") {Add a = o.new Add();} o.term=term() "+" o.operation=operation()/*@bgen(jjtree)*/
                                                                                   {
                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                     jjtc000 = false;
                                                                                   }
/*@egen*/ {o.node = a;}
| LOOKAHEAD("-") {Sub s = o.new Sub();} s.term=term() "-" s.operation=operation()/*@bgen(jjtree)*/
                                                                                  {
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                  }
/*@egen*/ {o.node = s;}
| term()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Term term() : {/*@bgen(jjtree) term */
               SimpleNode jjtn000 = new SimpleNode(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Term t = new Term();}
{/*@bgen(jjtree) term */
  try {
/*@egen*/
  (LOOKAHEAD("*") {Mul m = t.new Mul();} m.op=vars() "*" m.term=term()/*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                       }
/*@egen*/ {t.node = m;}
| LOOKAHEAD("/") {Div d = t.new Div();} d.op=vars() "/" d.term=term()/*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                      }
/*@egen*/ {t.node = d;}
| LOOKAHEAD("%") {Mod mo = t.new Mod();} mo.op=vars() "%" mo.term= term()/*@bgen(jjtree)*/
                                                                          {
                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                            jjtc000 = false;
                                                                          }
/*@egen*/ {t.node = mo;}
| "(" {paren pa = t.new paren();} pa.opera=operation() ")"/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/ {t.node = pa;}
| {vari v = t.new vari();} v.op=vars()/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ {t.node = v;} 
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

If_Statement if_statment() : {/*@bgen(jjtree) if_statment */
                              SimpleNode jjtn000 = new SimpleNode(JJTIF_STATMENT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/If_Statement i = new If_Statement();}
{/*@bgen(jjtree) if_statment */
  try {
/*@egen*/
  (< HVIS > i.stats=stats() "{" i.linjer=linjer() "}" i.ellers=ellers_statment()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Ellers_Statment ellers_statment() : {/*@bgen(jjtree) ellers_statment */
                                     SimpleNode jjtn000 = new SimpleNode(JJTELLERS_STATMENT);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Ellers_Statment e = new Ellers_Statment();}
{/*@bgen(jjtree) ellers_statment */
  try {
/*@egen*/
  ( LOOKAHEAD("{")< ELLERS > "{" e.linjer=linjer() "}"
| < ELLERS > e.if_stat=if_statment()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

While_Lokke while_lokke() : {/*@bgen(jjtree) while_lokke */
                             SimpleNode jjtn000 = new SimpleNode(JJTWHILE_LOKKE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/While_Lokke w = new While_Lokke();}
{/*@bgen(jjtree) while_lokke */
  try {
/*@egen*/
  (< SALANGE > w.stat=stats() < GENTAG > "{" w.linjer=linjer() "}"
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
For_Lokke for_lokke() : {/*@bgen(jjtree) for_lokke */
                         SimpleNode jjtn000 = new SimpleNode(JJTFOR_LOKKE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/For_Lokke f = new For_Lokke();}
{/*@bgen(jjtree) for_lokke */
  try {
/*@egen*/
  (< GENTAG > f.from=operation() < TIL > f.to=operation() "{" f.linjer=linjer() "}"
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Stats stats() : {/*@bgen(jjtree) stats */
                 SimpleNode jjtn000 = new SimpleNode(JJTSTATS);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Stats s = new Stats();}
{/*@bgen(jjtree) stats */
  try {
/*@egen*/
  (LOOKAHEAD(< OG >){and a = s.new and();}  a.stat1=stat() < OG > a.stat2=stat()/*@bgen(jjtree)*/
                                                                                 {
                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
                                                                                 }
/*@egen*/ {s.node=a;}
| LOOKAHEAD(< ELLER >) {or o = s.new or();} o.stat1=stat() < ELLER > o.stat2=stat()/*@bgen(jjtree)*/
                                                                                    {
                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                      jjtc000 = false;
                                                                                    }
/*@egen*/ {s.node=o;}
| s.stat1=stat()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Stat stat() : {/*@bgen(jjtree) stat */
               SimpleNode jjtn000 = new SimpleNode(JJTSTAT);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Stat s = new Stat();}
{/*@bgen(jjtree) stat */
  try {
/*@egen*/
  (LOOKAHEAD(operation()) {opsop o = s.new opsop();} o.op1=operation() o.operator=sammenlign() o.op2=operation()/*@bgen(jjtree)*/
                                                                                                                 {
                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                   jjtc000 = false;
                                                                                                                 }
/*@egen*/ {s.node=o;}
| {par p = s.new par();}"(" p.stats=stats() ")"/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/ {s.node=p;}
| {bool b = s.new bool();} b.udsagn=vars()/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ {s.node=b;}
| {not n=s.new not();} "!" n.stat=stat()/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ {s.node=n;}
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Sammenlign sammenlign() : {/*@bgen(jjtree) sammenlign */
                           SimpleNode jjtn000 = new SimpleNode(JJTSAMMENLIGN);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Sammenlign s = new Sammenlign();}
{/*@bgen(jjtree) sammenlign */
  try {
/*@egen*/
  (">"/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {s.node=s.new bigger(); return s;}
| "<"/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ {s.node=s.new lesser(); return s;} 
| ">="/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {s.node=s.new biggerequal(); return s;}
| "<="/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {s.node=s.new lesserequal(); return s;}
| "=="/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {s.node=s.new equal(); return s;}
| "!="/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {s.node=s.new notequal(); return s;}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ListOfVars list_of_vars() : {/*@bgen(jjtree) list_of_vars */
                             SimpleNode jjtn000 = new SimpleNode(JJTLIST_OF_VARS);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ListOfVars l = new ListOfVars(); Operation o;}
{/*@bgen(jjtree) list_of_vars */
  try {
/*@egen*/
  (o= operation() { l.op.add(o);})*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

